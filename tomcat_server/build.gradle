plugins {
    id 'java-library'
    id 'war'
}

// Configuration that will be applied to all projects
allprojects {
    repositories {
        mavenCentral()
    }
}

// Common configuration for all subprojects
subprojects {
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll([
            "--add-exports",
            "java.base/sun.net.www.protocol.http=ALL-UNNAMED",
            "--add-exports",
            "java.base/sun.net.www.protocol.https=ALL-UNNAMED",
            "--add-exports",
            "java.base/sun.net.www.http=ALL-UNNAMED"
        ])
    }

    dependencies {
        compileOnly fileTree(dir: "${rootProject.projectDir}/tomcat_server/lib/app", include: ['*.jar'])
        compileOnly fileTree(dir: "${home}/tomcat_build/lib", include: ['*.jar'])
    }

    jar {
        doLast {
            println ("jar packaging completed")
        }
    }
}

dependencies {
    implementation fileTree(dir: "${rootProject.projectDir}/tomcat_server/lib/app", include: ['*.jar'])
    implementation files(
            project('table-constants').tasks.named('jar').flatMap { it.archiveFile }
    )
    implementation files(
            project('framework').tasks.named('jar').flatMap { it.archiveFile }
    )
    implementation files(
            project('root-app').tasks.named('jar').flatMap { it.archiveFile }
    )
}

ext {
    serverPath = "${home}/tomcat_server"
    deploymentPath = "${home}/tomcat_build"
    neededPredefinedWebApps = []
}

// Source sets configuration for the root project
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}


war {
    webAppDirectory = file("src/main/webapp")
    archiveFileName = "ROOT.war"
    destinationDirectory = file("${deploymentPath}/webapps")

    doLast {
        copy {
            from project(":tomcat-server:instrumentation").tasks.named("jar")
            from project(":tomcat-server:tomcat-core").tasks.named("jar")
            into "${deploymentPath}/lib"
        }

        println "WAR packaging completed"
    }
}

import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

ext {
    def customPropertyFile = new File("${home}/custom/custom.properties")
    customProperties = null
    if (customPropertyFile.exists()) {
        println "custom.properties found"
        customProperties = new Properties()
        customProperties.load(customPropertyFile.newDataInputStream())
    }
}

def getCustomProperty(key, defaultValue) {
    if (customProperties == null || customProperties.getProperty(key) == null) {
        return defaultValue
    }
    return customProperties.getProperty(key)
}

def replaceToken(String filePath, List replacements) {
    def file = new File(filePath)
    if (file.exists()) {
        String content = file.text
        replacements.each { replacement ->
            content = content.replace(replacement.from, replacement.to)
        }
        file.text = content
    }
}

tasks.register('setupTomcatContainer') {
    doLast {
        println "Tomcat deployment path ${deploymentPath}"

        new File("${deploymentPath}").mkdirs()
        new File("${deploymentPath}/logs").mkdirs()

        copy {
            from zipTree("${home}/tomcat_binary.zip")
            into "${deploymentPath}"
        }

        copy {
            from "${serverPath}/src/main/resources/tomcat/"
            into "${deploymentPath}"
        }

        delete fileTree(dir: "${deploymentPath}/webapps")
        delete "${deploymentPath}/webapps"

        exec {
            commandLine "sed", "-i", "", "s|home_ph|${home}|", "${home}/tomcat_build/run.sh"
        }

        exec {
            commandLine "sed", "-i", "", "s|production_ph|${getCustomProperty("production", false)}|", "${home}/tomcat_build/run.sh"
        }

        println "set-up tomcat container completed"
    }
}

tasks.register('setTomcatEnvironmentValues') {
    doLast {
        replaceToken("${home}/tomcat_build/bin/setenv.sh", [
                [from: "MY_HOME=",
                 to  : "MY_HOME=${home}"
                ],
                [from: "CUSTOM_JAVA_OPTS=",
                 to  : "CUSTOM_JAVA_OPTS=\"" + getCustomProperty("java.opts", "") + "\""
                ],
                [from: "JAVA_HOME=",
                 to  : "JAVA_HOME=\"" + System.getenv("JAVA_HOME") + "\""
                ]
        ])
        
        if (getCustomProperty("custom.keystore.file", null) != null) {
            copy {
                from "${home}/custom/${getCustomProperty("custom.keystore.file", null)}"
                into "${home}/tomcat_build/conf/"
            }
            replaceToken("${home}/tomcat_build/conf/server.xml", [
                    [from: "server.pfx",
                     to  : "${getCustomProperty("custom.keystore.file", null)}"
                    ],
                    [from: "certificateKeystorePassword=\"tomcat\"",
                     to  : "certificateKeystorePassword=\"${getCustomProperty("custom.keystore.password", "")}\""
                    ]
            ])
        }
        
        if (getCustomProperty("custom.tomcat.http.port", null) != null) {
            replaceToken("${home}/tomcat_build/conf/server.xml", [
                    [from: "port=\"80\"",
                     to  : "port=\"${getCustomProperty("custom.tomcat.http.port")}\""
                    ]
            ])
        }
        
        if (getCustomProperty("custom.tomcat.https.port", null) != null) {
            replaceToken("${home}/tomcat_build/conf/server.xml", [
                    [from: "port=\"443\"",
                     to  : "port=\"${getCustomProperty("custom.tomcat.https.port")}\""
                    ]
            ])
        }
    }
}

tasks.register('setupServer') {
    doLast {
        println "All modules built and WAR deployed successfully"
    }
}


processResources {
    exclude "tomcat"
}


task cleanAll {
    group = 'build'
    description = 'Cleans all subprojects.'
    dependsOn subprojects.collect { it.tasks.matching { it.name == 'clean' } }
}

configureTaskDependencies(setupServer, [
        cleanAll,
        setupTomcatContainer,
        setTomcatEnvironmentValues,
        war
])

configureTaskDependencies(war, [project(':tomcat-server:table-constants').build, project(':tomcat-server:framework').build, project(':tomcat-server:root-app').build, project(':tomcat-server:instrumentation').build, project(':tomcat-server:tomcat-core').build])
